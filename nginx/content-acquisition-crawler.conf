# Content Acquisition Crawler Nginx configuration
# Save this to /etc/nginx/conf.d/content-acquisition-crawler.conf

location /app1/ {
    proxy_pass http://127.0.0.1:3000/;
    # No rewrite rule - Next.js basePath will handle this

    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header X-Original-URI $request_uri;
    proxy_set_header X-Original-METHOD $request_method;
    # Add WAF bypass headers
    proxy_set_header X-Requested-With "XMLHttpRequest";
    proxy_set_header Accept "application/pdf,text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
    add_header Content-Security-Policy "frame-ancestors 'self';";
    
    # Allow all methods to bypass WAF restriction
    proxy_method $request_method;
    
    # Increase timeouts for larger PDFs
    proxy_read_timeout 600;
    proxy_connect_timeout 300;
    proxy_send_timeout 600;
    proxy_redirect off;
    
    # Add headers to help bypass security restrictions
    proxy_buffering off;
    client_max_body_size 20M;
}

# Serve static assets with proper caching
location /app1/_next/static/ {
    proxy_pass http://127.0.0.1:3000/_next/static/;
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
    expires 365d;
    add_header Cache-Control "public, max-age=31536000, immutable";
}

# Handle public assets
location /app1/public/ {
    proxy_pass http://127.0.0.1:3000/public/;
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
}

# Special handling for PDF proxy endpoints to bypass WAF
location ~ ^/app1/api/pdf-proxy {
    # Pass all requests to Next.js
    proxy_pass http://127.0.0.1:3000;
    
    # Standard headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # WAF bypass specific settings - rotating user agents
    # Uncomment one of these and comment others periodically if WAF keeps blocking
    proxy_set_header User-Agent "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.4 Safari/605.1.15";
    #proxy_set_header User-Agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36";
    #proxy_set_header User-Agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/113.0";
    
    # Use XMLHttpRequest to bypass WAF API restrictions
    proxy_set_header X-Requested-With "XMLHttpRequest";
    proxy_set_header Accept "application/pdf,*/*;q=0.8";
    proxy_set_header Accept-Language "en-US,en;q=0.9";
    
    # Critical: Disable compression to prevent WAF content inspection
    proxy_set_header Accept-Encoding "";
    
    # Allow all methods - critical for WAF bypass
    proxy_method $request_method;
    
    # Prevent any HTTP-level caching
    add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
    add_header Pragma "no-cache";
    add_header Expires "0";
    
    # Increase timeouts for large PDFs and slow connections
    proxy_read_timeout 600;
    proxy_connect_timeout 300;
    proxy_send_timeout 600;
    
    # Disable buffering to handle large files better and bypass WAF inspection
    proxy_buffering off;
    client_max_body_size 100M;
    
    # Very permissive CORS settings to ensure PDFs load in any context
    add_header Access-Control-Allow-Origin "*";
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD";
    add_header Access-Control-Allow-Headers "*";
    add_header Access-Control-Max-Age "3600";
    add_header Access-Control-Expose-Headers "*";
    
    # Remove proxy headers that might trigger WAF
    proxy_hide_header X-Powered-By;
    proxy_hide_header Server;
    
    # Special handling for OPTIONS requests (pre-flight)
    if ($request_method = OPTIONS) {
        add_header Content-Type "text/plain charset=UTF-8";
        add_header Content-Length 0;
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD";
        add_header Access-Control-Allow-Headers "*";
        add_header Access-Control-Max-Age "3600";
        return 204;
    }
}
